[local ["NewStack","Push","Pop","IsEmpty","S1","S2","S3","X","A1","A2","Push2","Pop2","IsEmpty2"] [NewStack = proc {$ EXU1} [local ["StackOps","Out"] [StackOps = proc {$ S EXU2} [local ["Push","Pop","IsEmpty"] [Push = proc {$ N EXU3} [local ["Out"] [local ["EXU4"] [local ["EXU5","EXU6"] [EXU5 = N,EXU6 = S,EXU4 = '|'(1:EXU5 2:EXU6)],"StackOps" "EXU4" "Out"],EXU3 = Out]],Pop = proc {$ E EXU3} [local ["Out"] [case S of nil() then [EXU3 = Out] else [case S of '|'(1:H 2:T) then [E = H,local ["EXU4"] [EXU4 = T,"StackOps" "EXU4" "Out"],EXU3 = Out] else [skip]]]],IsEmpty = proc {$ EXU3} [local ["EXU4","EXU5"] [EXU4 = S,EXU5 = nil(),"Eq" "EXU4" "EXU5" "EXU3"]],local ["EXU3","EXU4","EXU5"] [EXU3 = Push,EXU4 = Pop,EXU5 = IsEmpty,EXU2 = ops(push:EXU3 pop:EXU4 isEmpty:EXU5)]]],local ["EXU2"] [EXU2 = nil(),"StackOps" "EXU2" "Out"],EXU1 = Out]],"NewStack" "S1",local ["PTU0"] [PTU0 = ops(push:Push pop:Pop isEmpty:IsEmpty),PTU0 = S1],"IsEmpty" "A1",local ["EXU1"] [EXU1 = 23,"Push" "EXU1" "S2"],local ["PTU0"] [PTU0 = ops(push:Push2 pop:Pop2 isEmpty:IsEmpty2),PTU0 = S2],local ["EXU1"] [EXU1 = X,"Pop2" "EXU1" "S3"],skip/BX]]