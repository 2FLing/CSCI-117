*Hoz> runFull "declarative" "append.txt" "appendOut.txt" 
Out : [ 1  2  3  4  5  6 ]

Out1 : [ 10  9  8  7 ]

Store : ((106, 92), '|'(1:103 2:104)), 
((105, 90, 80, 72, 33), 10),
((104, 95), '|'(1:101 2:102)),
((103, 88, 66, 31), 9),
((102, 98, 100, 97, 94, 57, 53), '|'(1:54 2:55)),
((101, 60, 29), 8), 
((99, 61), nil()),
((96, 89, 85, 87, 84, 63, 59), '|'(1:60 2:61)),
((93, 91, 82), '|'(1:88 2:89)),
((86, 67), nil()),
((83, 81, 77, 79, 69, 65), '|'(1:66 2:67)), 
((78, 73), nil()),
((68, 75, 71), '|'(1:72 2:73)),
((76, 34), nil()),
((74), nil()),
((70, 32), '|'(1:33 2:34)),
((64, 30), '|'(1:31 2:32)), 
((62), '|'(1:80 2:81)),
((58, 28), '|'(1:29 2:30)),
((56), '|'(1:90 2:91)),
((54, 27), 7),
((55), nil()),
((52, 11), '|'(1:27 2:28)), 
((51, 37), '|'(1:48 2:49)),
((50, 15), 1),
((49, 40), '|'(1:46 2:47)),
((48, 17), 2),
((47, 43, 45, 42, 39, 36, 10), '|'(1:21 2:22)), 
((46, 19), 3),
((44, 20), nil()),
((41, 18), '|'(1:19 2:20)),
((38, 16), '|'(1:17 2:18)),
((35, 9), '|'(1:15 2:16)),
((25), 6), 
((26), nil()),
((23), 5),
((24), '|'(1:25 2:26)),
((21), 4),
((22), '|'(1:23 2:24)),
((8), proc(["Ls","Ms","EXU1"],[case Ls of nil() then [EXU1 = Ms] else [case Ls of '|'(1:X 2:Lr) then [local ["Y"] [local ["EXU2","EXU3"] [EXU2 = Lr,EXU3 = Ms,"Append" "EXU2" "EXU3" "Y"],local ["EXU2","EXU3"] [EXU2 = X,EXU3 = Y,EXU1 = '|'(1:EXU2 2:EXU3)]]] else [skip]]],[("Append",8)])),
((12), '|'(1:50 2:51)),
((13), proc(["Ls","EXU1"],[case Ls of nil() then [EXU1 = nil()] else [case Ls of '|'(1:X 2:Xr) then [local ["Xl"] [local ["EXU2","EXU3"] [EXU2 = X,EXU3 = nil(),Xl = '|'(1:EXU2 2:EXU3)],local ["EXU2","EXU3"] [local ["EXU4"] [EXU4 = Xr,"Reverse" "EXU4" "EXU2"],EXU3 = Xl,"Append" "EXU2" "EXU3" "EXU1"]]] else [skip]]],[("Reverse",13),("Append",8)])),
((14), '|'(1:105 2:106)),
((1), Primitive Operation),
((2), Primitive Operation),
((3), Primitive Operation),
((4), Primitive Operation),
((5), Primitive Operation),
((6), Primitive Operation),
((7), Primitive Operation)

Mutable Store: Empty
Current Environment : ("Append" -> 8, "L1" -> 9, "L2" -> 10, "L3" -> 11, "Out" -> 12, "Reverse" -> 13, "Out1" -> 14, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)
Stack : ""