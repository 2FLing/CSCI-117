   // 1) nested if, nested case

// content in sugar2kern : [local ["A","B"] [A = false(),local ["EXU1"] [EXU1 = true(),if EXU1 then [skip/BA] else [local ["EXU2"] [EXU2 = B,if EXU2 then [skip] else [skip]]]]
// Everytime before enter if-else statements, sugar2kern creates an unbound executor, and bound the boolean value to the executor.
// we dont have to create any of these executor in kernel.txt, instead, we can use the local variables directly.

local A B in
    A = false()
    if true() then
        skip Browse A 
    else
        if B then
            skip Basic
        else
            skip Basic
        end
    end

// content in sugar2kern: case A of tree() then [skip] else [case A of false() then [skip] else [case A of true() then [skip] else [skip]]]]
// those translations in sugar2kern and kernel are almost the same. Not like if statements, ranslations in sugar2kern doesn't need to create any extra executor before
// enter case statements

    case A of tree() then   
        skip Basic
    end

    case A of false() then
        skip Basic
    end

    case A of true() then
        skip Basic
    end
end

// 2) more expressions; note that applications of primitive binary operators
//    ==, <, >, +, -, *, mod must be enclosed in parentheses (for hoz)

// content in sugar2kern: local ["A"] [A = 2,local ["EXU1"] [local ["EXU2","EXU3"] [EXU2 = A,EXU3 = 1,"Eq" "EXU2" "EXU3" "EXU1"],if EXU1 then [skip] else [skip]],local ["EXU1"] [local ["EXU2","EXU3"] [EXU2 = A,local ["EXU5","EXU6"] [EXU5 = 3,EXU6 = 1,"IntMinus" "EXU5" "EXU6" "EXU3"],"Eq" "EXU2" "EXU3" "EXU1"],if EXU1 then [skip/BA] else [skip]]]
// In the translations of sugar2kern, everytime before it calls procedures or enter if statements, it creates executors first, and bound those executors to arguments
// local variables are not allowed to pass into the procedures and if statements.

local A in
    A=2
    local One Three B C D in
        One=1
        Three=3
        {Eq A One B}
        if B then
            skip Basic
        end
        {IntMinus Three One C}
        {Eq A C D}
        if D then
            skip Browse A
        end
    end
end

// 3) "in" declaration 

// content in sugar2kern: local ["X","Y"] [local ["T"] [local ["EXU1","EXU2"] [EXU1 = 3,EXU2 = T,T = tree(1:EXU1 2:EXU2)],local ["A","B","PTU0"] [PTU0 = tree(1:A 2:B),PTU0 = T,local ["EXU1"] [local ["EXU2","EXU3"] [EXU2 = 1,EXU3 = 1,"Eq" "EXU2" "EXU3" "EXU1"],if EXU1 then [local ["Z"] [local ["B"] [local ["EXU1","EXU2"] [EXU1 = 5,EXU2 = 2,"IntMinus" "EXU1" "EXU2" "B"],skip/BB]]] else [skip]]]]]
// In the sugar2kern, when a local variable is assigned to data record, it creates executors for the elements in the record automatically.
// When a data record is assigned to a local variables, it creates a variable called "PTU0" at first, and then assigned "PTU0" to the local variable.
// base on what I understand, there will be "PTU1", "PTU2".... etc

local T = tree(1:3 2:T) X Y in
    local tree(1:A 2:B) = T C D Five Two in
        X = 1
        Y = 1
        Five = 5
        Two = 2
        {Eq X Y C}
        {IntMinus Five Two D}
        if C then B = D Z  in
            skip Browse B
        end
    end
end

// 4) expressions in place of statements

// content in sugar2kern: local ["Fun","R"] [Fun = proc {$ X EXU1} [EXU1 = X],local ["EXU1"] [EXU1 = 4,"Fun" "EXU1" "R"],skip/BR]
// In the translations, the number of arguments is not always the same as it in the procedure definition that is in sugar.txt.
// the number of arguments in translation depends on the operations happens in the procedure.
// In the sugar.txt, the definition of Fun procedure only has one argument. " Fun = proc {$ X}", but there is another variable from
// outside of the procedure "R". So, not like the definition in sugar.txt, in the translation, "Fun = proc {$ X EXU1} ". 
// From what I understand, it puts every variable that used in the procedure into the definition.

local Fun R in
    Fun = proc {$ X}
        R = X
        skip Browse R
    end
    {Fun 4}
end



// 5) Bind Fun

// content in sugar2kern: local ["A","B"] [skip,local ["EXU1","EXU2","EXU3"] [EXU1 = 4,EXU2 = B,local ["EXU4","EXU5"] [EXU4 = B,EXU5 = B,EXU3 = '#'(1:EXU4 2:EXU5)],A = rdc(1:EXU1 2:EXU2 3:EXU3)],local ["EXU1","EXU2"] [EXU1 = 5,local ["EXU4","EXU5"] [EXU4 = 3,EXU5 = 4,"IntMinus" "EXU4" "EXU5" "EXU2"],"IntPlus" "EXU1" "EXU2" "B"],skip/BA,skip/BB,skip/s]]
// In the translation, '#' is also a type of record. instead of "B#B", in translation, it becomes " '#'(1:B 2:B) "
  
local A B in
    skip Basic
    A = rdc(1:4 2:B 3:(B#B)) 
    local Three Four Five C in
        Three = 3
        Four = 4
        Five = 5
        {IntMinus Three Four C}
        {IntPlus C Five B}
        skip Browse A
        skip Browse B
        skip Store
    end
end

