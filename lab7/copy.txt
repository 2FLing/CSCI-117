local GateMaker AndG OrG NotG A B S IntToNeed Out MulPlex in 
        
  GateMaker = fun {$ F}
     fun {$ Xs Ys} GateLoop T in
        fun {GateLoop Xs Ys}
           case Xs of nil then nil
                   [] '|'(1:X 2:Xr) then
                      case Ys of nil then nil
                              [] '|'(1:Y 2:Yr) then
                                  ({F X Y}|{GateLoop Xr Yr})
                      end
           end
        end
        T = thread {GateLoop Xs Ys} end   // thread isn't (yet) a returnable expression
	T
     end
  end

  NotG = fun {$ Xs} NotLoop T in
     fun {NotLoop Xs}
        case Xs of nil then nil
                [] '|'(1:X 2:Xr) then ((1-X)|{NotLoop Xr})
        end
     end
     T = thread {NotLoop Xs} end          // thread isn't (yet) a returnable expression
     T
  end

  AndG = {GateMaker fun{$ X Y} if (X == 0) then 0 else (X*Y) end end}   // Use GateMaker
  OrG =  {GateMaker fun{$X Y} if (X == 1) then 1 else (X+Y)-(X*Y) end end}   // Use GateMaker
        
  IntToNeed = fun {$ L}
      case L of [] '|'(1:X 2:Xr) then
         local Y in
            ({ByNeed proc{$ A} A = X end Y}|{IntToNeed Xr})
         end
      nil then nil
      end    
  end

  fun {MulPlex A B S}
    K L M in
    K = {AndG {NotG S} A}
    L = {AndG S B}
    M = {OrG k L}
    M
  end

  A = {IntToNeed [0 1 1 0 0 1]}
  B = {IntToNeed [1 1 1 0 1 0]}
  S = [1 0 1 0 1 1]
  Out = {MulPlex A B S}

  // run a loop so the MulPlex threads can finish before displaying Out
  local Loop in
     proc {Loop X}
        if (X == 0) then skip Basic
        else {Loop (X-1)} end
     end
    {Loop 1000}
  end

  skip Browse Out

end
